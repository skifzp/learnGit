--------------------------------------
Как обновлять Гит репозиторий обновленными данными из локальной версии : 
для примера, создал на локалке файл, сделал git add fileName. 
А что нужно дальше . чтобы этот файл попал в удаленный репозиторий?

git commit
git push

-------------------------------------

Взять все изменения с Удаленного репозитория

git fetch
git pull

----------------------------------------

Коммит всех файлов с комментрарием
!!! попадают в коммит только ОТСЛЕЖУЕМЫЕ файлы(для которых ранее был выполнен git add)
git commit -a -m "text of commit"
	или
git commit -am "text of commit"

--------------------------------------------

Смотрим отличия между которые появились от последнего Комита (текущие изменения)
git diff

---------------------------------------
Откатить комитт на один шаг

git reset HEAD~1
git reset HEAD~1 --hard

Ресет разберет коммит и оставит дифф. При использовании Хард, еще и дифф потрет. :)
----------------------------------------

git push --force
!!! может перезетереть коммиты сделаные другими участниками

-------------------------------------------------------------------------------

Разрешение конфликта между Удаленной версией и Локальной версии файла

1. способ
	git merge --abort
		мы сказали гиту, что мы отклоняем слияние (конфликт остался, но сам конфликт исчерпан - мы отменили слияние)
		
2.  	2.1 git pull 
			происходит автосливание конфликтых версий
			
		2.2 открываем этот файл редактором и на свое усотрение редактируем его
		2.3 git add FileName
		2.4 git commit -a

-----------------------------------------------------------------------------------------------------
Как обновлять Гит репозиторий обновленными данными из локальной версии : 
для примера, создал на локалке файл, сделал git add fileName. 
А что нужно дальше . чтобы этот файл попал в удаленный репозиторий?

git commit
git push

-------------------------------------
Взять все изменения с Удаленного репозитория

git fetch
git pull

----------------------------------------

убирает изменения в файле до состояния последнего коммита
git checkout FileName
git checkout .   (всю директорию)

переключиться на ветку
git checkout ВЕТКА

------------------------------------------
git stash
скрывает изменения, внесенные после последнего коммита

git stash pop
возвращает скрытые изменения

git stash clear
безвозвратно удаляет скрытые изменения

---------------------------------------------------

чтобы узнать автора строчки для определенного файла
git blame FileName

----------------------------------------------------

как закомитить новую ветку в удаленный репозиторий:

	1. мы локально стоим на ветке отличной от МАСТЕР
			git checkout NoMasterBranch
	2.	делаем изменения и комитимся
	3.	создаем push с ассоциациейю нашей лок ветки с удал веткой на удал репозитории
			git push -u origin NoMasterBranch
			
---------------------------------------------------------

слить ВЕТКУ в МАСТЕР
	1. комитим все изменения в ветках Мастер и ВЕТКА
	2. переходим в МАСТЕР
	3. делаем мерже
			git merge ВЕТКА
	4. сливаем в удаленный репозиторий
			git push
			
----------------------------------------------------------------

изменить название ветки
	1. git branch -m OldName NewName
	
	2. если ветка уже была запушена в удаленный репозиторий:
			2.1	стягиваем все изменения с удаленки -> 
						git checkout OldName
						git pull
			2.2.  на локалке -> переименновываем ветку
						git branch -m OldName NewName
			2.3. на удаленке
						удаляем OldName -> git push origin : OldName
						пушим в удаленку -> git push -u origin NoMasterBranch
						
---------------------------------------------------------------

удалить лок ветку

	1. выйти в МАСТЕР
	2. удалить -> git branch -d ВЕТКА
	
---------------------------------------------

стянуть ветку из удаленного репозитория

	git fetch origin BRANCH_NAME
	git checkout BRANCH_NAME
	
--------------------------------------------------

удалить все НЕОТСЛЕЖИВАЕМЫЕ (untrack) файлы 

	git clean -f
	
	- а, чтобы удалить еще и в поддиректориях
		git clean -f -d
		OR
		git clean -fd
		
----------------------------------------------------------
	GREP
		
	seek TEXT with line number:
		git grep -n TEXT
	
	to count how mouch there is TEXT:
		git grep -c TEXT
	
	to look the few TEXTs:
		git grep -e TEXT_1 -e TEXT_2
	
	to ignore regester of TEXT
		git grep -i TEXT
	
---------------------------------------------------
	
	ALIAS
	
	нужны для сокращения команд, например вместо BRANCH хотим писать короткий аналог BR.
	для этого заходим в файл .gitconfig (общий или для конкретного репозитория) и вводим:
	
	[alias]
		branch = br
		
-----------------------------------------------------------
